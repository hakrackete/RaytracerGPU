#version 430 core

layout (local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;


const int MAX_RECURSION = 5;

// epsilon value bigger than 10e-6 is important for the reflectance of spheres
// otherwise self-intersection will happen
const float EPSILON = 10e-5;

struct HitRecord {
    float parameter;
    vec3 normal;
    vec3 rayDirection;
    vec3 intersectionPoint;
    vec3 color;
    int recursions;
    float reflectance;
};

struct Sphere{
  vec4 position_radius;
  vec4 color_padding;
};

struct Ray{
  vec3 o;
  vec3 d;
};

struct Material{
  float reflectiveness;
};

struct Model{
  uint startindex;
  uint endindex;
  Material material;
};

layout(binding = 1) buffer readonly SphereBuffer {
  Sphere spheres[];
};

layout(binding = 2) buffer readonly Positions{
  vec3[] positions;
};


layout(binding = 3) buffer readonly Normals{
  vec3[] normals;
};






layout (location = 0) uniform float t;

layout (location = 1) uniform float myFov;

layout (location = 2) uniform mat4 camToWorld;

layout (location = 3) uniform float mouse_x;
layout (location = 4) uniform float mouse_y;

layout (location = 5) uniform samplerCube skybox;




bool sphere_intersect(Ray ray, int myId, out HitRecord hitRecord){
  vec3 sphere_c = spheres[myId].position_radius.xyz;
  float sphere_r = spheres[myId].position_radius.w;
  hitRecord.rayDirection = ray.d;
  vec3 em = ray.o - sphere_c;
  float a = dot(ray.d,ray.d);
  float b = 2 * dot(ray.d,em);
  float c = dot(em,em) - pow(sphere_r,2);

  float disc = pow(b,2) - 4 * a * c;
  if (disc < 0){
    return false;
  }
  float first_root = (-b + sqrt(pow(b,2) - 4 * a * c)) / (2* a);
  float second_root = (-b - sqrt(pow(b,2) - 4 * a * c)) / (2* a);

  float smalles_root = min(first_root,second_root);
  float biggest_root = max(first_root,second_root);
  if (first_root < 0 && second_root < 0){
    return false;
  }
  else if (smalles_root < 0 && biggest_root > 0){
    smalles_root = biggest_root;
  }
  vec3 schnittpunkt = ray.o + smalles_root * ray.d;
  float schnittdistanz = length(schnittpunkt - ray.o);
  if (schnittdistanz > 0 && (hitRecord.parameter == -1 || schnittdistanz < hitRecord.parameter)){
    hitRecord.parameter = schnittdistanz;
    hitRecord.normal = normalize(schnittpunkt - sphere_c);
    hitRecord.intersectionPoint = schnittpunkt;
    hitRecord.color = spheres[myId].color_padding.xyz;
    hitRecord.reflectance = spheres[myId].color_padding.w;
    
    return true;
  }
  return false;
}

void shade(inout HitRecord hitRecord, vec3 lightsource){
  if (hitRecord.parameter == -1){
    float y_axis = float(gl_GlobalInvocationID.y)/imageSize(imgOutput).y;
    vec4 myCol = texture(skybox,hitRecord.rayDirection);
    hitRecord.color = myCol.xyz;
    // hitRecord.color = vec3(t);
    return; 
  }
  // color = hitRecord.color;
  vec3 N = normalize(hitRecord.normal);
  vec3 L = normalize(lightsource - hitRecord.intersectionPoint);
  vec3 V = normalize(-1 * hitRecord.rayDirection);
  vec3 R = reflect(-L,N);
  vec3 reflectionsvector = 2 * dot(V, N) * N + -1 * V;

  float diffuse_intensity = max((dot(N, L)),0.0);
  float specular_intensity = pow(max(dot(R, V), 0.0), 20.0);
  float ambient_intensity = 1;

  float general_intensity = 0.5 * diffuse_intensity + 0.2 * specular_intensity + 0.3 * ambient_intensity; 
  
  hitRecord.color *= general_intensity;
}

void intersect(Ray ray,out HitRecord hitRecord){
  for (int id = 0; id < spheres.length(); id++){
    sphere_intersect(ray,id,hitRecord);
  }
}


void main(){
    // memoryBarrierBuffer();
    mat4 camToWorldi = inverse(camToWorld);

    vec4 pixel = vec4(0.0, 0.0, 0.0, 1.0);
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 jitter = noise2(t);
    vec2 AA_pixel_coords = pixel_coords + jitter;
    ivec2 dims = imageSize(imgOutput);


    float max_x = dims.x / 1000.0;
    float max_y = dims.y /1000.0;

    float aspect_ratio = dims.x /float(dims.y);
    vec2 uv = vec2(pixel_coords)/ dims * 2 - vec2(1.0);

    float x = uv.x;
    float y = uv.y;

    float fov = radians(myFov);

    vec3 lightsource =  vec3(10.0,0.0,0.0);
    HitRecord hitRecord;
    hitRecord.parameter = -1;
    Ray ray;
    
    ray.o = vec3(camToWorldi * vec4(.0,.0,.0,1.0));
    ray.d = normalize(vec3(camToWorldi * (vec4(x * tan(fov/2) * aspect_ratio,y*tan(fov/2),-1.0,1.0))) - ray.o);
    intersect(ray,hitRecord);
    shade(hitRecord,lightsource);
    vec3 finalColor = vec3(0.0);
    float anteil = 1;
    finalColor += anteil * (1-hitRecord.reflectance) * hitRecord.color;
    // finalColor = vec3(hitRecord.parameter / 100);

    for (int recursion_count = 0; recursion_count < MAX_RECURSION; recursion_count++){
      if (hitRecord.reflectance <= 0){
        break;
      }
      anteil *= hitRecord.reflectance;
      if (anteil <= 0.01){
        break;
      }
      vec3 V = ray.d;
      vec3 N = normalize(hitRecord.normal);

      // Fehler: wenn man den HitRekord und Ray neu deklariert werden diese scheinbar nicht korrekt geupdated
      // Ray ray;
      ray.o = hitRecord.intersectionPoint + EPSILON * hitRecord.normal;
      ray.d = reflect(V,N);

      // nicht auskommentieren, wir gehen davon aus, dass die interresanten variablen des Hitrecords von den FUnktionen Ã¼berschrieben werden
      // HitRecord hitRecord;
      hitRecord.parameter = -1;
      hitRecord.reflectance = 0;
      intersect(ray,hitRecord);
      shade(hitRecord,lightsource);
      if (recursion_count == MAX_RECURSION-1){
        finalColor += anteil * hitRecord.color;
      }
      else{
        finalColor += anteil * (1-hitRecord.reflectance) * hitRecord.color;
      }
    }

    if (length(gl_GlobalInvocationID.xy - vec2(mouse_x,mouse_y)) < 10){
      finalColor = vec3(1.0,.0,.0);
    }

    pixel.xyz = finalColor;

    imageStore(imgOutput, pixel_coords, pixel);
    
}